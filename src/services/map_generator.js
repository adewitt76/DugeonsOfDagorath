// @ts-check


function intialize_map() {
  let map = new Array(32);
  for (var r = 0; r < map.length; r++) {
    map[r] = new Array(32);
    for (var c = 0; c < map.length; c++) {
      map[r][c] = "FF";
    }
  }
  return map;
}

export function generate_map() {
  const map = intialize_map();

  const starting_point = Math.trunc(Math.random() * 1024);
  const starting_x = Math.trunc(starting_point / 32);
  const starting_y = starting_point % 32;

  console.log('starting_point', starting_point);
  console.log('starting_x', starting_x);
  console.log('starting_y', starting_y);
  return map;
}
//MakeMazeLevel:
// The maze is a 32x32 cell (one byte per cell) table at $05F4. Each cell has 4 2-bit fields that
// describe the wall in a given direction. A value of 00 means the wall in that direction is open.
// A value of 01 is a normal door in that direction. A value of 10 is a magic door in that direction.
// A value of 11 is a solid wall. The 4 fields are stored in the byte as: LL_DD_RR_UU with UU being
// the least significant 2 bits.
//
// The maze is generated by carving out a series of random "runs". The code picks a random starting
// cell and a random direction. It picks a random "number of crossings" for the run from 1 to 8.
// Then it starts opening cells in that direction one by one until one of the followi[]ng occurs:
// - The run crosses the randomly chosen number of other runs
// - The run reaches the edge of the map
// - The cell would create a block of 4 adjacent open cells
//
// The 3D display during game play can only draw hallways. Four adjacent open cells would create an
// open space that the display can't handle. Thus the check in the run algorithm.
//
// The algorithm keeps count of each new open cell created. Runs are generated until exactly 500 cells
// have been opened. Each level has exactly 500 open cells in it.
//
// Once the 500 cells are open the code adds exactly 70 regular doors and 45 magic doors between adjacent
// cells. Both cells get a copy of the door in opposite directions.
//
// It is possible (though unlikely) to create a run that does not overlap another. This would be an
// unreachable area that would trap the player or required monsters. Each level is drawn with a pre-chosen
// random number seed. Thus the level is always the same, and the designers chose seeds that produce good
// mazes.
//
// Holes and ladders are manually defined for each level and are kept in a separate table.
